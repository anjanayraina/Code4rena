Link : https://github.com/code-423n4/2023-04-rubicon/blob/main/contracts/RubiconMarket.sol#:~:text=function%20_sort(,)%20internal%20%7B

File : RubiconMarket.sol

Esitmated Gas Saving : 50 gas 

 function compare1(uint a , uint b
     , uint c , uint d , uint e , uint f) internal pure returns(bool){
         return (a != b || c != d || e != f);
    }

    function compare2(uint a , uint b
     , uint c , uint d , uint e , uint f) internal pure returns(bool){
         return ((a ^ b) | (c ^ d) | (e ^ f)) != 0;
    }

    in the given functions ,  the following are logical equavalent but still dont consume the same amount of gas 
    1)   (a != b || c != d || e != f);
    2)   ((a ^ b) | (c ^ d) | (e ^ f)) != 0;

    you can consider overriding the following for saving some more gas : 

    pos = pos == 0 ||
            offers[pos].pay_gem != pay_gem ||
            offers[pos].buy_gem != buy_gem ||
            !isOfferSorted(pos)
            ? _find(id)
            : _findpos(id, pos);

    to 

    pos = ((pos^ 0) |
           (offers[pos].pay_gem ^ pay_gem) |
            (offers[pos].buy_gem ^ buy_gem) |
            !isOfferSorted(pos) ) != 0
            ? _find(id)
            : _findpos(id, pos);


Logic POC : 

Given 4 variables a, b, c and d represented as such:

0 0 0 0 0 1 1 0 <- a
0 1 1 0 0 1 1 0 <- b
0 0 0 0 0 0 0 0 <- c
1 1 1 1 1 1 1 1 <- d

To have a == b means that every 0 and 1 match on both variables. Meaning that a XOR (operator ^) would evaluate to 0 ((a ^ b) == 0), as it excludes by definition any equalities.
Now, if a != b, this means that thereâ€™s at least somewhere a 1 and a 0 not matching between a and b, making (a ^ b) != 0.

Both formulas are logically equivalent and using the XOR bitwise operator costs actually the same amount of gas:

      function xOrEquivalence(uint a, uint b) external returns (bool) {
        //return a != b; //370
        //return a ^ b != 0; //370
However, it is much cheaper to use the bitwise OR operator (|) than comparing the truthy or falsy values:

    function xOrOrEquivalence(uint a, uint b, uint c, uint d) external returns (bool) {
        //return (a != b || c != d); // 495
        //return (a ^ b | c ^ d) != 0; // 442
    }
These are logically equivalent too, as the OR bitwise operator (|) would result in a 1 somewhere if any value is not 0 between the XOR (^) statements, meaning if any XOR (^) statement verifies that its arguments are different.